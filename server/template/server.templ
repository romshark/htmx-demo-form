package template

import "fmt"
import "time"
import "github.com/romshark/htmx-demo-form/domain"

templ htmlMain(title string) {
	<!DOCTYPE html>
	<html>
		<head>
			<title>{ title }</title>
			<link rel="icon" href="/public/favicon.ico"/>
			<script src="/public/htmx.js"></script>
			<script src="https://unpkg.com/idiomorph@0.3.0/dist/idiomorph-ext.min.js"></script>
			<script src="/public/dist.js"></script>
			<link rel="stylesheet" href="/public/dist.css"/>
		</head>
		<body hx-ext="morph">
			<div id="viewport">
				{ children... }
			</div>
		</body>
	</html>
}

templ viewIndex(
	form Form,
	addressCountryOptions []NamedOption,
	shippingCompanyOptions []NamedOption,
	shippingOrders []domain.ShippingDetails,
) {
	<div class="md:container md:mx-auto ml-4 mr-4">
		<div class="mt-4">
			@componentOrderForm(form, addressCountryOptions, shippingCompanyOptions)
		</div>
		<hr class="mt-4">
		<h1 class="mt-2 mb-4">Pending Orders</h1>
		for i, o := range shippingOrders {
			<h1>Order #{ fmt.Sprintf("%d", i) } </h1>
			<table class="border border-solid">
				<tr>
					<td>Company Name</td>
					<td> { o.CompanyName.String() } </td>
				</tr>
				<tr>
					<td>First Name</td>
					<td> { o.ContactFirstName.String() } </td>
				</tr>
				<tr>
					<td>Last Name</td>
					<td> { o.ContactLastName.String() } </td>
				</tr>
				<tr>
					<td>Email</td>
					<td> { o.ContactEmail.String() } </td>
				</tr>
				<tr>
					<td>Phone</td>
					<td> { o.ContactPhone.String() } </td>
				</tr>
				<tr>
					<td>Express</td>
					if o.Express {
						<td> Yes </td>
					} else {
						<td> No </td>
					}
				</tr>
				<tr>
					<td>Shipping Company</td>
					<td> { o.ShippingCompany.String() } </td>
				</tr>
				<tr>
					<td>Due</td>
					<td> { o.Due.Format(time.RFC822) } </td>
				</tr>
				<tr>
					<td>Special Notes</td>
					<td> { o.SpecialNotes.String() } </td>
				</tr>
			</table>
		}
	</div>
}

templ pageIndex(
	form Form,
	addressCountryOptions []NamedOption,
	shippingCompanyOptions []NamedOption,
	shippingOrders []domain.ShippingDetails,
) {
	@htmlMain("Index") {
		@viewIndex(
			form,
			addressCountryOptions,
			shippingCompanyOptions,
			shippingOrders,
		)
	}
}

templ componentOrderForm(
	form Form,
	addressCountryOptions []NamedOption,
	shippingCompanyOptions []NamedOption,
) {
	<form
		class="flex flex-col gap-1"
		hx-post="/form/"
		hx-target="this"
		hx-swap="morph:outerHTML"
		hx-trigger="input delay:200ms">
		<h2>Contact</h2>
		<input
			id="input-company-name"
			name="companyName"
			placeholder="Company Name"
			autocomplete="off"
			value={form.ValueCompanyName}>
		if form.ErrorCompanyName != "" {
			<p class="mb-2 text-red-600">{ form.ErrorCompanyName }</p>
		}
		<input
			id="input-first-name"
			name="firstName"
			placeholder="First Name"
			autocomplete="off"
			value={form.ValueFirstName}>
		if form.ErrorFirstName != "" {
			<p class="mb-2 text-red-600">{ form.ErrorFirstName }</p>
		}
		<input
			id="input-last-name"
			name="lastName"
			placeholder="Last Name"
			autocomplete="off"
			value={form.ValueLastName}>
		if form.ErrorLastName != "" {
			<p class="mb-2 text-red-600">{ form.ErrorLastName }</p>
		}
		<input
			id="input-email"
			name="email"
			placeholder="Email"
			autocomplete="off"
			value={form.ValueEmail}>
		if form.ErrorEmail != "" {
			<p class="mb-2 text-red-600">{ form.ErrorEmail }</p>
		}
		<input
			id="input-phone"
			name="phone"
			placeholder="Phone"
			autocomplete="off"
			value={form.ValuePhone}>
		if form.ErrorPhone != "" {
			<p class="mb-2 text-red-600">{ form.ErrorPhone }</p>
		}
		<input
			id="input-due"
			name="due"
			type="date"
			autocomplete="off"
			value={form.ValueDue}>
		if form.ErrorDue != "" {
			<p class="mb-2 text-red-600">{ form.ErrorDue }</p>
		}
		<h2>Address</h2>
		<select
			id="input-address-country"
			name="addressCountry"
			placeholder="Country"
			autocomplete="off">
			@fragmentNamedOptions(addressCountryOptions, form.ValueAddressCountry)
		</select>
		if form.ErrorAddressCountry != "" {
			<p class="mb-2 text-red-600">{ form.ErrorAddressCountry }</p>
		}
		<input
			id="input-address-city"
			name="addressCity"
			placeholder="City"
			autocomplete="off"
			value={form.ValueAddressCity}>
		if form.ErrorAddressCity != "" {
			<p class="mb-2 text-red-600">{ form.ErrorAddressCity }</p>
		}
		<input
			id="input-address-postal-code"
			name="addressPostalCode"
			placeholder="Postal Code"
			autocomplete="off"
			value={form.ValueAddressPostalCode}>
		if form.ErrorAddressPostalCode != "" {
			<p class="mb-2 text-red-600">{ form.ErrorAddressPostalCode }</p>
		}
		<h2>Shipping</h2>
		<select
			id="input-shipping-company"
			name="shippingCompany"
			placeholder="Shipping Company"
			autocomplete="off">
			@fragmentNamedOptions(shippingCompanyOptions, form.ValueShippingCompany)
		</select>
		
		if form.ErrorShippingCompany != "" {
			<p class="mb-2 text-red-600">{ form.ErrorShippingCompany }</p>
		}
		<div>
			<input
				id="input-express"
				name="express"
				type="checkbox"
				placeholder="Express"
				if form.ValueExpress != "" {
					checked
				}
				>
			<label for="input-express">Express</label>
		</div>
		<h2>Additional</h2>
		<textarea
			id="input-special-notes"
			name="specialNotes"
			placeholder="Special Notes"
			autocomplete="off">
			{form.ValueSpecialNotes}
		</textarea>
		if form.ErrorSpecialNotes != "" {
			<p class="mb-2 text-red-600">{ form.ErrorSpecialNotes }</p>
		}

		<button
			type="submit"
			hx-post="/orders/"
			hx-swap="innerHTML"
			hx-target="#viewport">Add</button>
	</form>
}

templ fragmentNamedOptions(opts []NamedOption, selected string) {
	for _, opt := range opts {
		<option
			value={opt.Value}
			if selected == opt.Value {
				selected
			}
		>{opt.Name}</option>
	}
}